    @PostMapping("/{id}/edit")
    public String editTrip(@ModelAttribute Trip trip, @ModelAttribute Budget budget, @PathVariable long id, @ModelAttribute MiscExpenses miscExpenses, @RequestParam(name = "miscexp-title", required = false) List<String> miscTitle, @RequestParam(name = "miscexp-cost", required = false) List<Double> miscCost) {

        tripService.deleteOldMiscExpenseFromBudget(budget);
//        budgetDao.delete(trip.getTripBudget());
        User user = userDao.findById(Utils.currentUserId());
        trip.setUser(user);
        Trip currentTrip = tripDao.findById(id);
        Vehicle vehicle = trip.getVehicle();

        // Only edits post if correct user sending post request
        if(user.equals(currentTrip.getUser())){
            trip.setUser(user);
            trip.setStops(
                (int)
                Math.ceil(Calculator.numberOfStops
                (Calculator.convertMetersToMiles
                (trip.getDistance()),
                vehicle.getMpg(),
                vehicle.getTankSize()))
            );


            trip.setTripBudget(budget);
            tripDao.save(trip);
        }
        trip.setUser(user);
        tripDao.save(trip);
        return "redirect:/profile";
    } // Post Mapping for /trips/{id}/edit

        @PostMapping("/create")
        public String postTrip(Model model, @ModelAttribute Trip trip, @ModelAttribute Budget budget, @RequestParam(name = "miscexp-title", required = false) List<String> miscTitle, @RequestParam(name = "miscexp-cost", required = false) List<Double> miscCost) throws JsonProcessingException {
            ObjectMapper mapper = new ObjectMapper();
            Calculator calculator = new Calculator();
            System.out.println("Inside postTrip. trip received from user: ");
            System.out.println(mapper.writeValueAsString(trip));
            System.out.println("Inside postTrip. budget received from user: ");
            System.out.println(mapper.writeValueAsString(budget));
            // Current user
            User user = userDao.findById(Utils.currentUserId());
            System.out.printf("User: %s%n", user.getUsername());
            // Current user is set as the trip's user
            trip.setUser(user);
            tripDao.save(trip);
            // Vehicle is set to the user's trip
            Vehicle vehicle = trip.getVehicle();
            System.out.println("Vehicle: ");
            System.out.println(mapper.writeValueAsString(vehicle));
            // Number of stops is calculated using the vehicle's info & trip distance
            trip.setStops(
                    (int)Math.ceil(
                    Calculator.numberOfStops(
                    trip.getDistance(),
                    vehicle.getMpg(),
                    vehicle.getTankSize())
                )
            );
            System.out.println("Trip: ");
            System.out.println(mapper.writeValueAsString(trip));
            budget = TripService.budgetToMiscExpenseMethod(trip, budget, miscTitle, miscCost);

            budget.setGas(calculator.expectedGasConsumptionForTrip(trip));

            trip.setTripBudget(budget);


            tripDao.save(trip);
            System.out.println("trip after saving: ");
            System.out.println(mapper.writeValueAsString(trip));

            model.addAttribute("trip", trip);


            return "redirect:/trips/calculator";
        } // PostMapping for "/trips/create"